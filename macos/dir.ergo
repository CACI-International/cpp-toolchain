std:import { fs, match, source, Path, String } = std:

targets = [
    arm64-apple-macos
    arm64e-apple-macos
    x86_64-apple-macos
    arm64-apple-ios
    arm64e-apple-ios
]

per-target = fn :f -> (std:Map:from <| std:Iter:map (fn :i -> std:MapEntry: :i (f :i)) :targets)

min-supported-version = fn :target -> match (workspace:target-triple:os :target) [
    ios -> 12.5
    macos -> match (workspace:target-triple:arch :target) [
        arm64  -> 11.0
        arm64e -> 11.0
        x86_64 -> 10.13
    ]
]

# Build LLVM
llvm = {
    flags = [
        "-DLIBCXX_INSTALL_LIBRARY=OFF",
        "-DLIBCXX_INSTALL_HEADERS=ON",
        "-DLIBCXX_HIDE_FROM_ABI_PER_TU_BY_DEFAULT=ON",
        "-DLIBCXX_HAS_MERGED_TYPEINFO_NAMES_DEFAULT=OFF", # llvm.org/PR37398
        "-DLLDB_ENABLE_PYTHON=OFF"
        "-DLLDB_ENABLE_LIBEDIT=OFF"
        "-DLLDB_ENABLE_CURSES=OFF"
        "-DLLVM_ENABLE_TERMINFO=OFF"
        String:format "-DCMAKE_OSX_DEPLOYMENT_TARGET={}" <| min-supported-version workspace:target-triple:host
    ]
    workspace:build:llvm "Building LLVM" [clang, lldb, libcxx, libcxxabi, compiler-rt] :flags
}

# Build OpenMP
openmp = {
    build = fn :target -> {
        workspace:build:openmp (String:format "Building OpenMP ({})" :target) [
            String:format "-DCMAKE_OSX_ARCHITECTURES={}" <| workspace:target-triple:arch :target
            String:format "-DCMAKE_OSX_SYSROOT={}" <| match (workspace:target-triple:os :target) [macos -> macosx, ios -> iphoneos]
            String:format "-DCMAKE_OSX_DEPLOYMENT_TARGET={}" <| min-supported-version workspace:target-triple:host
        ]
    }
    per-target :build
}

# Assemble the toolchain
{
    toolchain = {
        dir = Path:new:
        fs:create-dir <| Path:join :dir libexec wut
        fs:create-dir <| Path:join :dir bin
        fs:copy :llvm (Path:join :dir libexec wut llvm)
        fs:copy (Path:join (source:dir ()) tools.sh) (Path:join :dir libexec wut tools.sh)
        workspace:prepare-toolchain :dir :targets
        per-target (fn :target -> fs:copy openmp::target <| Path:join :dir libexec wut openmp :target)
        :dir
    }

    targets
}
