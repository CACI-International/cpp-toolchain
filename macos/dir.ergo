std:import { fs, match, source, Path, String } = std:
std:import { merge-dir } = workspace:

targets = [
    arm64-apple-macos
    arm64e-apple-macos
    x86_64-apple-macos
    arm64-apple-ios
    arm64e-apple-ios
]

per-target = fn :f -> (std:Map:from <| std:Iter:map (fn :i -> std:MapEntry: :i (f :i)) :targets)

min-supported-version = fn :target -> match (workspace:target-triple:os :target) [
    ios -> 12.5
    macos -> match (workspace:target-triple:arch :target) [
        arm64  -> 11.0
        arm64e -> 11.0
        x86_64 -> 10.13
    ]
]

common-flags = [
    "-DLIBCXX_HIDE_FROM_ABI_PER_TU_BY_DEFAULT=ON"
    "-DLIBCXX_HAS_MERGED_TYPEINFO_NAMES_DEFAULT=OFF" # llvm.org/PR37398

    "-DLLVM_ENABLE_LIBCXX=ON"
    "-DLLVM_INCLUDE_DOCS=OFF"
    "-DLLVM_INCLUDE_TESTS=OFF"
    "-DLLVM_INCLUDE_EXAMPLES=OFF"
    "-DLLVM_ENABLE_TERMINFO=OFF"
    "-DLLVM_BUILD_LLVM_DYLIB=ON"
    "-DLLVM_LINK_LLVM_DYLIB=ON"

    "-DLLDB_ENABLE_PYTHON=OFF"
    "-DLLDB_ENABLE_LIBEDIT=OFF"
    "-DLLDB_ENABLE_CURSES=OFF"
    "-DLLDB_USE_SYSTEM_DEBUGSERVER=ON"

    String:format "-DCMAKE_OSX_DEPLOYMENT_TARGET={}" <| min-supported-version workspace:target-triple:host
]

cross-compile-flags = fn :target -> [
    String:format "-DCMAKE_OSX_ARCHITECTURES={}" <| workspace:target-triple:arch :target
    String:format "-DCMAKE_OSX_SYSROOT={}" <| match (workspace:target-triple:os :target) [macos -> macosx, ios -> iphoneos]
    String:format "-DCMAKE_OSX_DEPLOYMENT_TARGET={}" <| min-supported-version workspace:target-triple:host
]

# Build LLVM
llvm = {
    flags = [
        "-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON"

        # libc++ used by sanitizers
        "-DLIBCXX_INSTALL_LIBRARY=ON"
        "-DLIBCXX_INSTALL_HEADERS=ON"
        "-DLIBCXX_ENABLE_SHARED=ON"
        "-DLIBCXX_ENABLE_STATIC=OFF"

        ^:common-flags
    ]
    workspace:build:llvm "Building LLVM" [clang, lld, lldb, libcxx, libcxxabi, compiler-rt] :flags
}

# Build tablegen
tablegen = workspace:build:llvm "Building TableGen" [clang] :common-flags

# Build runtime
llvm-runtime = {
    build = fn :target -> {
        flags = [
            String:format "-DLLVM_TABLEGEN={}" <| Path:join :tablegen bin llvm-tblgen
            "-DLLVM_INSTALL_TOOLCHAIN_ONLY=ON"

            "-DLIBCXX_ENABLE_SHARED=OFF"
            "-DLIBCXX_ENABLE_STATIC=ON"
            "-DLIBCXX_HERMETIC_STATIC_LIBRARY=ON"
            "-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON"
            "-DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON"
            "-DLIBCXX_USE_COMPILER_RT=ON"
            "-DLIBCXX_HAS_ATOMIC_LIB=OFF"
            "-DLIBCXX_INSTALL_LIBRARY=ON"
            "-DLIBCXX_INSTALL_HEADERS=OFF"

            "-DLIBCXXABI_ENABLE_SHARED=OFF"
            "-DLIBCXXABI_ENABLE_STATIC=ON"
            "-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON"
            "-DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=ON"
            "-DLIBCXXABI_USE_COMPILER_RT=ON"
            "-DLIBCXXABI_USE_LLVM_UNWINDER=ON"

            "-DLIBUNWIND_USE_COMPILER_RT=ON"

            ^:common-flags
            ^:cross-compile-flags :target
        ]
        workspace:build:llvm (String:format "Building LLVM runtime ({})" :target) [libcxx, libcxxabi, libunwind] :flags
    }
    per-target :build
}

# Build OpenMP
openmp = per-target <| fn :target -> workspace:build:openmp (String:format "Building OpenMP ({})" :target) <| :cross-compile-flags :target

tools-sh = !fs:track <| Path:join (source:dir ()) tools.sh

# Assemble the toolchain
{
    toolchain = {
        dir = Path:new:
        fs:create-dir <| Path:join :dir libexec wut
        fs:create-dir <| Path:join :dir bin
        fs:copy :llvm (Path:join :dir libexec wut llvm)
        fs:copy :tools-sh (Path:join :dir libexec wut tools.sh)
        workspace:prepare-toolchain :dir :targets
        per-target <| fn :target -> {
            dir = Path:join :dir libexec wut runtime :target
            fs:create-dir <| Path:join :dir lib
            fs:create-dir <| Path:join :dir include
            merge-dir (Path:join llvm-runtime::target lib) (Path:join :dir lib)
            merge-dir (Path:join llvm-runtime::target include) (Path:join :dir include)
            merge-dir (Path:join openmp::target lib) (Path:join :dir lib)
            merge-dir (Path:join openmp::target include) (Path:join :dir include)
        }
        :dir
    }

    targets
}
