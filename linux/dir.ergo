ct-ng-url="http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.24.0.tar.xz"
ct-ng-src = download-and-unpack :ct-ng-url

# CMake flags for using a particular GCC toolchain
use-gcc-cmake-flags = fn toolchain-dir target -> {
    gcc-tool = fn toolchain-dir target tool -> path:join :toolchain-dir bin <| string:format "{}-{}" (triple :target) :tool
    [
        string:format "-DCMAKE_C_COMPILER={}" <| gcc-tool :toolchain-dir :target cc
        string:format "-DCMAKE_CXX_COMPILER={}" <| gcc-tool :toolchain-dir :target c++
    ]
}

per-architecture = fn f -> {
    x86_64 = f x86_64
    aarch64 = f aarch64
}

# Build crosstool-NG
ct-ng = value:cache {
    args = {
        env = { PATH = env:get PATH }
        pwd = remove-top-dir :ct-ng-src
    }
    out = seq ^[
        build-dir = (path:new)
        install-dir = (path:new)
        fs:create-dir :build-dir
        fs:create-dir :install-dir
        exec ^:args sh ./configure <| string:format "--prefix={}" :install-dir |>:complete
        exec ^:args make |>:complete
        exec ^:args make install |>:complete
        path:join :install-dir bin ct-ng
    ]
    task "building crosstool-NG" :out
}

# Build bootstrap GCC with crosstool-NG
gcc = {
    build = fn target -> value:cache {
        config = string:format "{}.config" :target
        out = (path:new)
        args = {
            env = { PATH = env:get PATH }
            pwd = :out
        }
        toolchain = seq ^[
            fs:create-dir (path:join :out tarballs)
            fs:copy (path:join :script-dir :config) (path:join :out ".config")
            exec ^:args :ct-ng build |>:complete
            path:join :out toolchain
        ]
        task (string:format "building gcc ({})" :target) :toolchain
    }
    per-architecture :build
}

# Build zlib for target, using bootstrap toolchain
zlib = {
    build = fn target -> build:zlib (string:format "building zlib ({})" :target) (use-gcc-cmake-flags gcc::target :target)
    per-architecture :build
}

# Build flatbuffers for target, using bootstrap toolchain
flatbuffers = {
    build = fn target -> build:flatbuffers (string:format "building flatbuffers ({})" :target) (use-gcc-cmake-flags gcc::target :target)
    per-architecture :build
}

# Assemble bootstrap toolchain containing zlib
gcc-with-deps = {
    build = fn target -> value:cache {
        out = (path:new)
        toolchain = seq ^[
            fs:copy gcc::target :out
            merge-dir zlib::target (path:join :out (triple :target) sysroot usr)
            :out
        ]
        task (string:format "assembling bootstrap toolchain ({})" :target) :toolchain
    }
    per-architecture :build
}

# Build LLVM with bootstrap toolchain
llvm = {
    build = fn target -> build:llvm (string:format "building llvm ({})" :target) [clang, lld] (use-gcc-cmake-flags gcc-with-deps::target :target)
    per-architecture :build
}

# Delete remnants of GCC build
delete-unused-gcc-components = fn dir -> {
    delete-target = fn target -> {
        gcc-dir = path:join :dir gcc (triple :target)
        [
            exec rm "-rf" (path:join :gcc-dir build.log.bz2) |>:complete
            exec rm "-rf" (path:join :gcc-dir bin) |>:complete
            exec rm "-rf" (path:join :gcc-dir libexec) |>:complete
            exec rm "-rf" (path:join :gcc-dir (triple :target) bin) |>:complete
        ]
    }
    per-architecture :delete-target
}

# Delete static libraries from LLVM
delete-unused-llvm-libraries = fn dir -> {
    exec find (path:join :dir llvm lib) ^(string:split " " "-name *.a -exec rm -f {} +") |>:complete
}

# Assemble the toolchain
build-toolchain = fn target -> value:cache {
    parent = (path:new)
    out = path:join :parent <| toolchain-name :target
    toolchain = seq ^[
        [
            fs:create-dir <| path:join :out gcc
            fs:create-dir <| path:join :out scripts
            fs:create-dir <| path:join :out bin
        ]
        [
            per-architecture (fn target -> fs:copy gcc-with-deps::target (path:join :out gcc <| triple :target))
            fs:copy llvm::target (path:join :out llvm)
            fs:copy flatbuffers::target (path:join :out flatbuffers)
            fs:copy (path:join :script-dir tools.sh) (path:join :out scripts tools.sh)
        ]
        [
            delete-unused-llvm-binaries :out
            delete-unused-llvm-libraries :out
            delete-unused-gcc-components :out
            make-links :out :target
            make-host-file :out :target
        ]
        :out
    ]
    task (string:format "assembling toolchain ({})" :target) :toolchain
}

{
    build-toolchain
}
