^ergo std

version = 1.0.0

# Step into the only directory in another directory
remove-top-dir = fn dir -> {
    [only] = fs:glob <| string:format "{}/*/" :dir
    :only
}

# Download a file and unarchive it
download-and-unpack = fn url -> value:cache {
    [^_, filename] = string:split / :url
    archive = seq ^[
        out = path:join (path:new) :filename
        fs:create-dir <| path:parent :out
        net:download :url :out
        :out
    ]
    unpacked = (path:new)
    task (string:format "fetching {} from {}" :filename :url) <| seq (fs:unarchive :archive :unpacked) :unpacked
}

llvm-url="https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/llvm-project-11.0.0.tar.xz"
llvm-src = download-and-unpack :llvm-url

build = {
    cmake-project = fn build-args -> value:cache {
        build = (path:new)
        install = (path:new)
        args = {
            env = { PATH = env:get PATH }
            pwd = :build
        }
        install-prefix = string:format "-DCMAKE_INSTALL_PREFIX={}" :install
        out = seq ^[
            fs:create-dir :build
            exec ^:args cmake build-args:src ^build-args:extra-flags :install-prefix "-DCMAKE_BUILD_TYPE=Release" |>:complete
            exec ^:args cmake --build :build -- -j4 |>:complete
            exec ^:args cmake -P cmake_install.cmake |>:complete
            :install
        ]
        task (string:format "{}" build-args:message) :out
    }

    llvm = fn message llvm-projects flags -> value:cache {
        projects = collection:fold (fn acc v -> string:format "{}{};" :acc :v) "-DLLVM_ENABLE_PROJECTS=" :llvm-projects
        build-args = {
            src = path:join (remove-top-dir :llvm-src) llvm
            extra-flags = [^:flags, :projects, "-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64", "-DLLVM_ENABLE_ZLIB=ON"]
            message = :message
        }
        cmake-project :build-args
    }
}

target-triple = {
    arch = fn target -> (string:split - :target) 0 | value:by-content
    vendor = fn target -> (string:split - :target) 1 | value:by-content
    os = fn target -> (string:split - :target) 2 | value:by-content

    host = value:by-content {
        # Get the OS (values are "Linux", "Darwin")
        os = exec uname |>:stdout | string:from | string:trim | value:by-content

        # Get the architecture ("x86_64", "aarch64", etc)
        arch = exec uname -m |>:stdout | string:from | string:trim | value:by-content

        match (:os | value:by-content) {
            =Linux = string:format "{}-unknown-linux-gnu" :arch
            =Darwin = string:format "{}-apple-macos" :arch
        }
    }
}

use-gcc-cmake-flags = fn toolchain-dir target -> {
    gcc-tool = fn toolchain-dir target tool -> path:join :toolchain-dir bin <| string:format "{}-{}" :target :tool
    [
        string:format "-DCMAKE_C_COMPILER={}" <| gcc-tool :toolchain-dir :target cc
        string:format "-DCMAKE_CXX_COMPILER={}" <| gcc-tool :toolchain-dir :target c++
    ]
}

# Make toolchain binary links to the appropriate implementation (either script or binary)
prepare-toolchain = fn dir targets -> {
    binaries-to-keep = [
        clang
        clang++
        clang-11
        ld.lld
        ld64.lld
        lld
        llvm-ar
        llvm-as 
        llvm-size
        llvm-nm
        llvm-strip
        llvm-objcopy 
        llvm-objdump 
        llvm-cxxfilt 
        llvm-addr2line 
        llvm-symbolizer 
        llvm-strings
        llvm-readelf 
        llvm-readobj
        llvm-install-name-tool
        llvm-lipo
        clang-format 
        scan-build
    ]

    prefixed-tools = [
        cc
        c++
        ld
        ar
        as 
        ranlib
        size
        nm
        strip
        objcopy
        objdump 
        c++filt 
        addr2line 
        strings
        readelf
        ^match target-vendor {
            =apple = [install_name_tool, lipo]
            _ = []
        }
    ]

    non-prefixed-tools = [
        clang-format 
        scan-build
    ]

    link = fn source target -> exec ln -sf :source :target |>:complete

    make-script-tools = fn target -> {
        prefix = fn file -> path:join :dir bin (string:format "{}-{}" :target :file)
        collection:map (fn file -> link "../scripts/tools.sh" (prefix :file)) :prefixed-tools
    }

    keep-binary-patterns = collection:fold (fn acc v -> [^:acc, "!", -name, :v]) [] :binaries-to-keep

    [
        # Delete unusued llvm binaries
        exec find (path:join :dir llvm bin) ^:keep-binary-patterns ^(string:split " " "-type f -exec rm -f {} +") |>:complete
        exec find (path:join :dir llvm lib) ^(string:split " " "-name *.a -exec rm -f {} +") |>:complete

        # Link the various tools into the bin directory
        collection:map :make-script-tools :targets
        collection:map (fn file -> link (string:format "{}-{}" target-triple:host :file) (path:join :dir bin :file)) :prefixed-tools
        collection:map (fn file -> link (path:join .. llvm bin :file) (path:join :dir bin :file)) :non-prefixed-tools

        # Make a file in the toolchain that contains the host triple
        exec sh -c (string:format "echo {} > {}" target-triple:host (path:join :dir scripts host)) |>:complete
    ]
}

# Merge a directory into another directory
merge-dir = fn src dst -> exec sh -c (string:format "cp -rl {}/* {}" :src :dst) |>:complete

# Archives a toolchain and installs it into the working directory
install-toolchain = fn toolchain -> {
    [^_, basename] = path:split :toolchain
    out = path:join :script-dir <| string:format "{}.tar.gz" :basename
    args = {
        pwd = path:parent :toolchain
        env = { PATH = env:get PATH }
    }
    exec ^:args tar -czvf :out :basename |>:complete
}

test-toolchain = fn toolchain targets -> value:cache {
    test-target = fn target -> {
        tool = fn tool -> fn ^args -> {
            kwargs = {
                env = { PATH = string:format "{}:{}" (path:join :toolchain bin) (env:get PATH) }
                pwd = path:join :script-dir test
            }
            prefix = match :target {
                =() = ""
                _ = string:format "{}-" :target
            }
            tool = string:format "{}{}" :prefix :tool
            exec ^:kwargs :tool ^:args |>:complete
        }

        cc = tool cc
        c++ = tool c++
        ld = tool ld
        ar = tool ar
        ranlib = tool ranlib
        strip = tool strip

        out = (path:new)
        bar.o = path:join :out bar.o
        bar.a = path:join :out bar.a
        foo.o = path:join :out foo.o
        foo-lib = match (target-triple:os target-triple:host) {
            =macos = path:join :out libfoo.dylib
            =linux = path:join :out libfoo.so
        }
        test-c = path:join :out test-c
        test-c++ = path:join :out test-c++

        link-flags = match (target-triple:os target-triple:host) {
            =macos = [-dylib]
            =linux = [-shared]
        }
        run-test = {
        }
        seq ^[
            fs:create-dir :out

            # Build library
            cc -Wall -c -o :bar.o bar.c
            cc -Wall -c -o :foo.o foo.c
            ar rc :bar.a :bar.o
            ranlib :bar.a
            ld ^:link-flags -o :foo-lib :foo.o :bar.a
            strip --strip-all :foo-lib
  
            # Build C program
            cc -Wall -o :test-c main.c :foo-lib
            strip --strip-all :test-c

            # Test C++ compiler
            c++ -Wall -o :test-c++ main.cpp :foo-lib
            strip --strip-all :test-c++

            # Run tests (if correct target)
            match (value:by-content :target) {
                =target-triple:host = {
                    kwargs = {
                        env = {
                            LD_LIBRARY_PATH = :out
                            DYLD_LIBRARY_PATH = :out
                        }
                    }
                    seq ^[
                        exec ^:kwargs :test-c |>:complete
                        exec ^:kwargs :test-c++ |>:complete
                    ]
                }
                _ = ()
            }
        ]
    }
    collection:map :test-target :targets
}

{
    prelude = {
        ^(ergo std)
        download-and-unpack
        remove-top-dir
        build
        prepare-toolchain
        merge-dir
        target-triple
    }

    command = fn cmd ^args -> match :cmd {
        =build = {
            impl = ergo (target-triple:os target-triple:host)
	        toolchain = value:cache <| seq ^[
                out = path:join (path:new) <| string:format "wut-{}-{}" :version target-triple:host
                impl:build :out
                test-toolchain :out impl:targets
                :out
            ]
            install-toolchain :toolchain
        }
    }
}
