^(ergo std)

llvm-url="https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/llvm-project-10.0.1.tar.xz"
zlib-url="https://www.zlib.net/fossils/zlib-1.2.7.3.tar.gz"

remove-top-dir = fn dir -> {
    [only] = fs:glob <| string:format "{}/*/" :dir
    :only
}

download-and-unpack = fn url -> value:cache {
    [^_, filename] = string:split / :url
    archive = seq ^[
        out = path:join (path:new) :filename
        fs:create-dir <| path:parent :out
        net:download :url :out
        :out
    ]
    unpacked = (path:new)
    task (string:format "fetching {} from {}" :filename :url) <| seq (fs:unarchive :archive :unpacked) :unpacked
}

llvm-src = download-and-unpack :llvm-url
zlib-src = download-and-unpack :zlib-url

build-cmake-project = fn build-args -> value:cache {
    build = (path:new)
    install = (path:new)
    args = {
        env = { PATH = env:get PATH }
        pwd = :build
    }
    install-prefix = string:format "-DCMAKE_INSTALL_PREFIX={}" :install
    out = seq ^[
        fs:create-dir :build
        exec ^:args cmake build-args:src ^build-args:extra-flags :install-prefix "-DCMAKE_BUILD_TYPE=Release" |>:complete
        exec ^:args cmake "--build" :build "--" "-j4" |>:complete
        exec ^:args cmake "-P" cmake_install.cmake |>:complete
        :install
    ]
    task (string:format "{}" build-args:info) :out
}

build-llvm = fn message llvm-projects flags -> value:cache {
    projects = collection:fold (fn acc v -> string:format "{}{};" :acc :v) "-DLLVM_ENABLE_PROJECTS=" :llvm-projects
    build-args = {
        src = path:join (remove-top-dir :llvm-src) llvm
        extra-flags = [^:flags, :projects, "-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64", "-DLLVM_ENABLE_ZLIB=ON"]
        message = :message
    }
    build-cmake-project :build-args
}

build-zlib = fn message flags -> {
    build-args = {
        src = remove-top-dir :zlib-src
        extra-flags = :flags
        message = :message
    }
    build-cmake-project :build-args
}

os = exec uname |>:stdout | string:from | string:trim | value:force

triple = fn target -> value:cache {
    match :os {
        =Linux = string:format "{}-unknown-linux-gnu" :target
        =Darwin = string:format "{}-apple-darwin" :target
    }
}

toolchain-name = fn target -> string:format "toolchain-{}" <| triple :target

delete-unused-llvm-binaries = fn dir -> {
    keep = [
        clang
        clang++
        clang-10
        ld.lld
        ld64.lld
        lld
		llvm-ar
		llvm-as 
		llvm-ranlib
		llvm-size
		llvm-nm
		llvm-strip
		llvm-objcopy 
		llvm-objdump 
		llvm-cxxfilt 
		llvm-addr2line 
		llvm-symbolizer 
		llvm-strings
		llvm-readelf 
		llvm-readobj 
		clang-format 
		scan-build
    ]

    patterns = collection:fold (fn acc v -> [^:acc, "!", "-name", :v]) [] :keep

    exec find (path:join :dir llvm bin) ^:patterns ^(string:split " " "-xtype f -exec rm -f {} +") |>:complete
}

make-links = fn dir target -> {
    prefixed-tools = [
        cc
        c++
        ld
		ar
		as 
		ranlib
		size
		nm
		strip
		objcopy
		objdump 
		c++filt 
		addr2line 
		strings
		readelf 
    ]

    non-prefixed-tools = [
		clang-format 
		scan-build
    ]

    make-script-tools = fn target -> {
        prefix = fn file -> path:join :dir bin (string:format "{}-{}" (triple :target) :file)
        collection:map (fn file -> exec ln "-sf" "../scripts/tools.sh" (prefix :file) |>:complete) :prefixed-tools
    }

    [
        make-script-tools aarch64
        make-script-tools x86_64
        collection:map (fn file -> exec ln "-sf" (string:format "{}-{}" (triple :target) :file) (path:join :dir bin :file) |>:complete) :prefixed-tools
        collection:map (fn file -> exec ln "-sf" (path:join .. llvm bin :file) (path:join :dir bin :file) |>:complete) :non-prefixed-tools
    ]
}

make-host-file = fn dir target -> {
    exec sh "-c" (string:format "echo {} > {}" (triple :target) (path:join :dir scripts host)) |>:complete
}

merge-dir = fn src dst -> exec sh "-c" (string:format "cp -rl {}/* {}" :src :dst) |>:complete

prelude = {
    ^(ergo std)
    download-and-unpack = :download-and-unpack
    remove-top-dir = :remove-top-dir
    build-llvm = :build-llvm
    build-zlib = :build-zlib
    delete-unused-llvm-binaries = :delete-unused-llvm-binaries
    make-links = :make-links
    make-host-file = :make-host-file
    merge-dir = :merge-dir
    triple = :triple
    toolchain-name = :toolchain-name
}

fn cmd ^args -> match :cmd {
    =prelude = :prelude
    =build = match :os {
        =Linux = ergo linux
    }
}
