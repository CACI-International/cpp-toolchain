^ergo std

# Step into the only directory in another directory
remove-top-dir = fn dir -> {
    [only] = fs:glob <| string:format "{}/*/" :dir
    :only
}

# Download a file and unarchive it
download-and-unpack = fn url -> value:cache {
    [^_, filename] = string:split / :url
    archive = seq ^[
        out = path:join (path:new) :filename
        fs:create-dir <| path:parent :out
        net:download :url :out
        :out
    ]
    unpacked = (path:new)
    task (string:format "fetching {} from {}" :filename :url) <| seq (fs:unarchive :archive :unpacked) :unpacked
}

llvm-url="https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/llvm-project-11.0.0.tar.xz"
zlib-url="https://www.zlib.net/fossils/zlib-1.2.7.3.tar.gz"

llvm-src = download-and-unpack :llvm-url
zlib-src = download-and-unpack :zlib-url

build = {
    cmake-project = fn build-args -> value:cache {
        build = (path:new)
        install = (path:new)
        args = {
            env = { PATH = env:get PATH }
            pwd = :build
        }
        install-prefix = string:format "-DCMAKE_INSTALL_PREFIX={}" :install
        out = seq ^[
            fs:create-dir :build
            exec ^:args cmake build-args:src ^build-args:extra-flags :install-prefix "-DCMAKE_BUILD_TYPE=Release" |>:complete
            exec ^:args cmake --build :build -- -j4 |>:complete
            exec ^:args cmake -P cmake_install.cmake |>:complete
            :install
        ]
        task (string:format "{}" build-args:message) :out
    }

    llvm = fn message llvm-projects flags -> value:cache {
        projects = collection:fold (fn acc v -> string:format "{}{};" :acc :v) "-DLLVM_ENABLE_PROJECTS=" :llvm-projects
        build-args = {
            src = path:join (remove-top-dir :llvm-src) llvm
            extra-flags = [^:flags, :projects, "-DLLVM_TARGETS_TO_BUILD=X86;ARM;AArch64", "-DLLVM_ENABLE_ZLIB=ON"]
            message = :message
        }
        cmake-project :build-args
    }

    zlib = fn message flags -> {
        build-args = {
            src = remove-top-dir :zlib-src
            extra-flags = :flags
            message = :message
        }
        cmake-project :build-args
    }
}

target-triple = {
    arch = fn target -> (string:split - :target) 0 | value:by-content
    vendor = fn target -> (string:split - :target) 1 | value:by-content
    os = fn target -> (string:split - :target) 2 | value:by-content

    host = {
        # Get the OS (values are "Linux", "Darwin")
        os = exec uname |>:stdout | string:from | string:trim | value:by-content

        # Get the architecture ("x86_64", "aarch64", etc)
        arch = exec uname -m |>:stdout | string:from | string:trim | value:by-content

        match (:os | value:by-content) {
            =Linux = string:format "{}-unknown-linux-gnu" :arch
            =Darwin = string:format "{}-apple-macos" :arch
        }
    }
}

use-gcc-cmake-flags = fn toolchain-dir target -> {
    gcc-tool = fn toolchain-dir target tool -> path:join :toolchain-dir bin <| string:format "{}-{}" :target :tool
    [
        string:format "-DCMAKE_C_COMPILER={}" <| gcc-tool :toolchain-dir :target cc
        string:format "-DCMAKE_CXX_COMPILER={}" <| gcc-tool :toolchain-dir :target c++
    ]
}

# Make toolchain binary links to the appropriate implementation (either script or binary)
prepare-toolchain = fn dir targets -> {
    binaries-to-keep = [
        clang
        clang++
        clang-10
        ld.lld
        ld64.lld
        lld
        llvm-ar
        llvm-as 
        llvm-ranlib
        llvm-size
        llvm-nm
        llvm-strip
        llvm-objcopy 
        llvm-objdump 
        llvm-cxxfilt 
        llvm-addr2line 
        llvm-symbolizer 
        llvm-strings
        llvm-readelf 
        llvm-readobj
        llvm-install-name-tool
        llvm-lipo
        clang-format 
        scan-build
    ]

    prefixed-tools = [
        cc
        c++
        ld
        ar
        as 
        ranlib
        size
        nm
        strip
        objcopy
        objdump 
        c++filt 
        addr2line 
        strings
        readelf
        ^match target-vendor {
            =apple = [install_name_tool, lipo]
            _ = []
        }
    ]

    non-prefixed-tools = [
        clang-format 
        scan-build
    ]

    link = fn source target -> exec ln -sf :source :target |>:complete

    make-script-tools = fn target -> {
        prefix = fn file -> path:join :dir bin (string:format "{}-{}" :target :file)
        collection:map (fn file -> link "../scripts/tools.sh" (prefix :file)) :prefixed-tools
    }

    keep-binary-patterns = collection:fold (fn acc v -> [^:acc, "!", -name, :v]) [] :binaries-to-keep

    [
        # Delete unusued llvm binaries
        exec find (path:join :dir llvm bin) ^:keep-binary-patterns ^(string:split " " "-type f -exec rm -f {} +") |>:complete
        exec find (path:join :dir llvm lib) ^(string:split " " "-name *.a -exec rm -f {} +") |>:complete

        # Link the various tools into the bin directory
        collection:map :make-script-tools :targets
        collection:map (fn file -> link (string:format "{}-{}" target-triple:host :file) (path:join :dir bin :file)) :prefixed-tools
        collection:map (fn file -> link (path:join .. llvm bin :file) (path:join :dir bin :file)) :non-prefixed-tools

        # Make a file in the toolchain that contains the host triple
        exec sh -c (string:format "echo {} > {}" target-triple:host (path:join :dir scripts host)) |>:complete
    ]
}

# Merge a directory into another directory
merge-dir = fn src dst -> exec sh -c (string:format "cp -rl {}/* {}" :src :dst) |>:complete

# Archives a toolchain and installs it into the working directory
install-toolchain = fn toolchain -> {
    [^_, basename] = path:split :toolchain
    out = path:join :script-dir <| string:format "{}.tar.gz" :basename
    args = {
        pwd = path:parent :toolchain
        env = { PATH = env:get PATH }
    }
    exec ^:args tar -czvf :out :basename |>:complete
}

{
    prelude = {
        ^(ergo std)
        download-and-unpack
        remove-top-dir
        build
        prepare-toolchain
        merge-dir
        target-triple
    }

    command = fn cmd ^args -> match :cmd {
        =build = {
	    toolchain = value:cache <| seq ^[
                out = path:join (path:new) <| string:format "toolchain-{}" target-triple:host
                ergo (target-triple:os target-triple:host) :out
                :out
            ]
            install-toolchain :toolchain
        }
    }
}
