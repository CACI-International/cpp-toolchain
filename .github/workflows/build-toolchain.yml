name: Build toolchain

on:
  push:
  workflow_dispatch:
    inputs:
      build_number:
        description: Extra build number (for multiple releases in one day)
        required: true
        default: 0

jobs:

  build-gcc:
    strategy:
      matrix:
        target:
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - name: armv7-unknown-linux-gnueabihf
            os: ubuntu-24.04
          - name: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
    name: gcc ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache
        with:
          path: built-gcc
          key: gcc-${{ matrix.target.os }}-${{ matrix.target.name }}-${{ hashFiles('toolchain/gcc/**/*') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y diffutils gawk libarchive-tools libtool-bin help2man ncurses-dev zlib1g-dev python3-dev

          # https://lists.gnu.org/archive/html/bug-texinfo/2024-05/msg00000.html
          sudo apt-get remove texinfo
          mkdir ~/texinfo && curl -L https://ftp.gnu.org/gnu/texinfo/texinfo-7.2.tar.gz | tar --strip-components=1 -zx -C ~/texinfo
          cd ~/texinfo && ./configure && make && sudo make install
      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B built-gcc -S toolchain/gcc
          cmake --build built-gcc --parallel -t gcc-toolchain-${{ matrix.target.name }}
      - name: Create artifact archive
        run: tar -cf gcc-${{ matrix.target.name }}.tar built-gcc/${{ matrix.target.name }}/toolchain # maintain case-sensitivity
      - name: Upload build log
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ matrix.target.name }} log
          path: built-gcc/${{ matrix.target.name }}/build.log
          if-no-files-found: error
      - name: Upload built gcc
        uses: actions/upload-artifact@v4
        with:
          name: gcc-${{ matrix.target.name }}
          path: gcc-${{ matrix.target.name }}.tar
          if-no-files-found: error

  build-sysroot:
    needs: build-gcc
    strategy:
      matrix:
        target:
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - name: armv7-unknown-linux-gnueabihf
            os: ubuntu-24.04
          - name: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
    name: sysroot ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache
        with:
          path: build/*.tar.xz
          key: sysroot-${{ matrix.target.os }}-${{ matrix.target.name }}-${{ hashFiles('toolchain/**/*') }}
      - name: Download built gcc
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: gcc-${{ matrix.target.name }}
      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          tar -xf gcc-${{ matrix.target.name }}.tar
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DGCC_CACHE_DIR=${{ github.workspace }}/built-gcc -B build -S toolchain
          cmake --build build --parallel -t sysroot-package-${{ matrix.target.name }}
      - name: Upload built sysroot
        uses: actions/upload-artifact@v4
        with:
          name: sysroot-${{ matrix.target.name }}
          path: build/sysroot-${{ matrix.target.name }}.tar.xz
          if-no-files-found: error

  build-llvm:
    needs: build-gcc
    strategy:
      matrix:
        target:
          - name: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
          - name: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
          - name: x86_64-apple-macos
            os: macos-13
          - name: arm64-apple-macos
            os: macos-14
          - name: x86_64-pc-windows-msvc
            os: windows-2025
    name: llvm ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache
        with:
          path: build/*.tar.xz
          key: llvm-${{ matrix.target.os }}-${{ matrix.target.name }}-${{ hashFiles('toolchain/**/*') }}
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Download built gcc
        if: ${{ contains(matrix.target.name, 'linux') && steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v4
        with:
          pattern: gcc-*
      - name: Extract gcc
        run: find . -name "gcc-*.tar" -exec tar -xf {} \;
        if: ${{ contains(matrix.target.name, 'linux') && steps.cache.outputs.cache-hit != 'true' }}
      - name: Build LLVM
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DGCC_CACHE_DIR=${{ github.workspace }}/built-gcc -B build -S toolchain
          cmake --build build --parallel -t llvm-package
      - name: Build compiler-rt
        if: ${{ matrix.target.name == 'x86_64-unknown-linux-gnu' && steps.cache.outputs.cache-hit != 'true' }}
        run: cmake --build build --parallel -t compiler-rt-package
      - name: List files
        run: ls build
      - name: Upload built llvm
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ matrix.target.name }}
          path: build/llvm-${{ matrix.target.name}}.tar.xz
          if-no-files-found: error
      - name: Upload built compiler-rt
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target.name == 'x86_64-unknown-linux-gnu' }}
        with:
          name: compiler-rt-linux
          path: build/compiler-rt-linux.tar.xz
          if-no-files-found: error

  test-bazel-rules:
    needs: [build-llvm, build-sysroot]
    uses: ./.github/workflows/bazel.yml
    with:
      use-built-toolchain: true

  release:
    needs: test-bazel-rules
    name: Release
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '{llvm,sysroot,compiler-rt}-*'
          path: artifacts/
          merge-multiple: True
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - run: |
          VERSION=toolchain-$(date +%Y.%m.%d)
          if [ "${{ inputs.build_number }}" != "0" ]; then VERSION="$VERSION-${{ inputs.build_number }}"; fi
          git tag -a $VERSION -m "Release $VERSION"
          git push --tags
          gh release create $VERSION artifacts/*
        env:
          GH_TOKEN: ${{ github.token }}
